# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2020
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-17 16:43+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2021\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:2
msgid "What Is \"Command-Based\" Programming?"
msgstr "Komut Tabanlı Programlama nedir?"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:4
msgid ""
"WPILib supports a robot programming methodology called “command-based” "
"programming. In general, “command-based” can refer both the general "
"programming paradigm, and to the set of WPILib library resources included to"
" facilitate it."
msgstr ""
"WPILib, “komut tabanlı-command-based” programlama adı verilen bir robot "
"programlama metodolojisini destekler. Genel olarak, “komut tabanlı” hem "
"genel programlama paradigmasına hem de bunu kolaylaştırmak için dahil edilen"
" WPILib kitaplık kaynakları kümesine başvurabilir."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:6
msgid ""
"“Command-based” programming is an example of what is known as a `design "
"pattern. <https://en.wikipedia.org/wiki/Design_pattern>`__ It is a general "
"way of organizing one’s robot code that is well-suited to a particular "
"problem-space. It is not the only way to write a robot program, but it is a "
"very effective one; command-based robot code tends to be clean, extensible, "
"and (with some tricks) easy to re-use from year to year."
msgstr ""
"`Komut tabanlı` programlama, `tasarım modeli "
"<https://en.wikipedia.org/wiki/Design_pattern> `__  olarak bilinen şeyin bir"
" örneğidir. Kişinin belirli bir problem alanına uygun robot kodunu "
"düzenlemenin genel bir yoludur. Bir robot programı yazmanın tek yolu bu "
"değil, ama çok etkili bir yol; Komut tabanlı robot kodu, yıldan yıla temiz, "
"genişletilebilir ve (bazı kolaylıklar ile) yeniden kullanımı kolay olma "
"eğilimindedir."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:8
msgid ""
"The command-based paradigm is also an example of what is known as "
"`declarative <https://en.wikipedia.org/wiki/Declarative_programming>`__ "
"programming. In declarative programming, the emphasis is placed on *what* "
"the program ought to do, rather than *how* the program ought to do it. Thus,"
" the command-based libraries allow users to define desired robot behaviors "
"while minimizing the amount of iteration-by-iteration robot logic that they "
"must write. For example, in a command-based program, a user can specify that"
" “the robot should perform an action when a button is pressed” (note the use"
" of a :ref:`lambda <docs/software/commandbased/convenience-features:Lambda "
"Expressions (Java)>`):"
msgstr ""
"Komut tabanlı paradigma aynı zamanda `bildirim temelli-"
"declarative<https://en.wikipedia.org/wiki/Declarative_programming>`__ "
"programlama olarak bilinen şeyin bir örneğidir. Bildirimsel programlamada, "
"programın bunu *nasıl* yapması gerektiğinden çok, programın *ne yapması* "
"gerektiğine vurgu yapılır. Bu nedenle, komut tabanlı kitaplıklar, "
"kullanıcıların yazmaları gereken yinelemeli robot mantığı miktarını en aza "
"indirirken istenen robot davranışlarını tanımlamalarına olanak tanır. "
"Örneğin, komut tabanlı bir programda, bir kullanıcı “robotun bir düğmeye "
"basıldığında bir eylem gerçekleştirmesi gerektiğini” belirtebilir ( "
":ref:`lambda <docs/software/commandbased/convenience-features:Lambda "
"Expressions (Java)>` kullanımına dikkat edin):"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:20
msgid ""
"In contrast, in an ordinary `imperative "
"<https://en.wikipedia.org/wiki/Imperative_programming>`__ program, the user "
"would need to check the button state every iteration, and perform the "
"appropriate action based on the state of the button."
msgstr ""
"Bunun aksine, sıradan bir "
"`zorunlu<https://en.wikipedia.org/wiki/Imperative_programming>`__ "
"programında, kullanıcının her yinelemede düğme durumunu kontrol etmesi ve "
"düğmenin durumuna bağlı olarak uygun eylemi gerçekleştirmesi gerekir."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:47
msgid "Subsystems and Commands"
msgstr "Subsystems ve Commands"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:52
msgid ""
"The command-based pattern is based around two core abstractions: "
"**commands**, and **subsystems.**"
msgstr ""
"Komut tabanlı model, iki temel betimlemeye dayanmaktadır: **komutlar-"
"commands** ve **alt sistemler-subsystems**.  "

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:54
msgid ""
"**Subsystems** are the basic unit of robot organization in the design-based "
"paradigm. Subsystems `encapsulate "
"<https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)>`__ "
"lower-level robot hardware (such as motor controllers, sensors, and/or "
"pneumatic actuators), and define the interfaces through which that hardware "
"can be accessed by the rest of the robot code. Subsystems allow users to "
"“hide” the internal complexity of their actual hardware from the rest of "
"their code - this both simplifies the rest of the robot code, and allows "
"changes to the internal details of a subsystem without also changing the "
"rest of the robot code. Subsystems implement the ``Subsystem`` interface."
msgstr ""
" **Alt sistemler** , tasarım temelli paradigmada robot organizasyonunun "
"temel birimidir. Alt sistemler,  alt düzey robot donanımını (motor "
"denetleyicileri, sensörler ve / veya pnömatik aktüatörler gibi) "
"`kapsar<https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)>`__"
" ve bu donanıma robot kodunun geri kalanı tarafından erişilebileceği "
"arabirimleri tanımlar. Alt sistemler, kullanıcıların gerçek donanımlarının "
"dahili karmaşıklığını kodlarının geri kalanından “gizlemelerine” olanak "
"tanır - bu hem robot kodunun geri kalanını basitleştirir hem de robot "
"kodunun geri kalanını değiştirmeden bir alt sistemin dahili ayrıntılarında "
"değişikliklere izin verir . Alt sistemler, ``Alt Sistem`` arayüzünü uygular."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:56
msgid ""
"**Commands** define high-level robot actions or behaviors that utilize the "
"methods defined by the subsystems. A command is a simple `state machine "
"<https://en.wikipedia.org/wiki/Finite-state_machine>`__ that is either "
"initializing, executing, ending, or idle. Users write code specifying which "
"action should be taken in each state. Simple commands can be composed into "
"“command groups” to accomplish more-complicated tasks. Commands, including "
"command groups, implement the ``Command`` interface."
msgstr ""
" **Komutlar-Commands** , alt sistemler tarafından tanımlanan yöntemleri "
"kullanan üst düzey robot eylemlerini veya davranışlarını tanımlar. Bir "
"komut, başlatan, yürüten, sonlandıran veya boşta olan basit bir `state "
"machine-durum makinesi <https://en.wikipedia.org/wiki/Finite-"
"state_machine>`__ 'dir. Kullanıcılar, her durumda hangi işlemin yapılması "
"gerektiğini belirten bir kod yazar. Basit komutlar, daha karmaşık görevleri "
"gerçekleştirmek için “komut grupları” halinde oluşturulabilir. Komut "
"grupları dahil komutlar, ``Command`` arayüzünü uygular."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:59
msgid "How Commands Are Run"
msgstr "Komutlar Nasıl Çalıştırılır ?"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:61
msgid "For a more detailed explanation, see :doc:`command-scheduler`."
msgstr "Daha fazla bilgi için, bakınız :doc:`command-scheduler`."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:63
msgid ""
"Commands are run by the ``CommandScheduler`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandScheduler.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1CommandScheduler.html>`__),"
" a singleton class that is at the core of the command-based library. The "
"``CommandScheduler`` is in charge of polling buttons for new commands to "
"schedule, checking the resources required by those commands to avoid "
"conflicts, executing currently-scheduled commands, and removing commands "
"that have finished or been interrupted. The scheduler’s ``run()`` method may"
" be called from any place in the user’s code; it is generally recommended to"
" call it from the ``robotPeriodic()`` method of the ``Robot`` class, which "
"is run at a default frequency of 50Hz (once every 20ms)."
msgstr ""
"Komutlar, komut tabanlı kitaplığın merkezinde yer alan bir tekil sınıf olan "
"``CommandScheduler`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandScheduler.html>`"
" __, `C ++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1CommandScheduler.html>`"
" __) tarafından çalıştırılır. ``CommandScheduler`` , programlanacak yeni "
"komutlar için sorgulama düğmelerinden, çakışmaları önlemek için bu "
"komutların gerektirdiği kaynakları kontrol etmekten, halihazırda "
"programlanmış komutları yürütmekten ve bitmiş veya kesilmiş komutları "
"kaldırmaktan sorumludur. Planlayıcının ``run()`` yöntemi, kullanıcının "
"kodundaki herhangi bir yerden çağrılabilir; 50 Hz varsayılan frekansta (her "
"20 ms'de bir) çalışan ``Robot`` sınıfının ``robotPeriodic()`` yönteminden "
"çağrılması önerilir."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:65
msgid ""
"Multiple commands can run concurrently, as long as they do not require the "
"same resources on the robot. Resource management is handled on a per-"
"subsystem basis: commands may specify which subsystems they interact with, "
"and the scheduler will never schedule more than one command requiring a "
"given subsystem at a time. This ensures that, for example, users will not "
"end up with two different pieces of code attempting to set the same motor "
"controller to different output values. If a new command is scheduled that "
"requires a subsystem that is already in use, it will either interrupt the "
"currently-running command that requires that subsystem (if the command has "
"been scheduled as interruptible), or else it will not be scheduled."
msgstr ""
"Robotta aynı kaynakları gerektirmedikleri sürece birden çok komut aynı anda "
"çalışabilir. Kaynak yönetimi, alt sistem bazında ele alınır: komutlar, hangi"
" alt sistemlerle etkileşime girdiklerini belirleyebilir ve scheduler-"
"programlayıcı, bir seferde belirli bir alt sistemi gerektiren birden fazla "
"komutu asla programlamaz. Bu, örneğin kullanıcıların aynı motor kontrol "
"cihazını farklı çıkış değerlerine ayarlamaya çalışan iki farklı kod parçası "
"ile sonuçlanmamasını sağlar. Halihazırda kullanımda olan bir alt sistemi "
"gerektiren yeni bir komut programlanırsa, ya o alt sistemi gerektiren şu "
"anda çalışan komutu keser (komut kesintiye uğrayabilir olarak "
"programlandıysa) ya da programlanmaz."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:67
msgid ""
"Subsystems also can be associated with “default commands” that will be "
"automatically scheduled when no other command is currently using the "
"subsystem. This is useful for continuous “background” actions such as "
"controlling the robot drive, or keeping an arm held at a setpoint."
msgstr ""
"Alt sistemler, alt sistemi halihazırda başka bir komut kullanmadığında "
"otomatik olarak zamanlanacak olan `varsayılan komutlarla` da "
"ilişkilendirilebilir. Bu, robot sürücüsünü kontrol etmek veya bir kolu ayar "
"noktasında tutmak gibi sürekli `arka plan` eylemleri için kullanışlıdır."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:69
msgid ""
"When a command is scheduled, its ``initialize()`` method is called once. Its"
" ``execute()`` method is then called once per call to "
"``CommandScheduler.getInstance().run()``. A command is un-scheduled and has "
"its ``end(boolean interrupted)`` method called when either its "
"``isFinished()`` method returns true, or else it is interrupted (either by "
"another command with which it shares a required subsystem, or by being "
"canceled)."
msgstr ""
"Bir komut zamanlandığında, ``initialize()`` yöntemi bir kez çağrılır. Daha "
"sonra ``execute()`` yöntemi, ``CommandScheduler.getInstance().Run()`` "
"çağrısı başına bir kez çağrılır. Bir komut programlanmamış ve ``end (boolean"
" interrupted)`` yöntemi çağrıldığında ``isFinished()`` yöntemi true "
"döndürdüğünde veya kesildiğinde (kaynağı paylaştığı başka bir komutla veya "
"iptal edilerek)."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:72
msgid "Command Groups"
msgstr "Komut Grupları - Command Groups"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:74
msgid ""
"It is often desirable to build complex commands from simple pieces. This is "
"achievable by `composing "
"<https://en.wikipedia.org/wiki/Object_composition>`__ commands into “command"
" groups.” A :doc:`command group <command-groups>` is a command that contains"
" multiple commands within it, which run either in parallel or in sequence. "
"The command-based library provides several types of command groups for teams"
" to use, and users are encouraged to write their own, if desired. As command"
" groups themselves implement the ``Command`` interface, they are "
"`recursively composable "
"<https://en.wikipedia.org/wiki/Object_composition#Recursive_composition>`__ "
"- one can include command groups *within* other command groups. This "
"provides an extremely powerful way of building complex robot actions with a "
"simple library."
msgstr ""
"Basit parçalardan karmaşık komutlar oluşturmak genellikle arzu edilir. Bu,  "
"komutlarını `komut grupları` halinde "
"`oluşturarak`<https://en.wikipedia.org/wiki/Object_composition>`__ elde "
"edilebilir. :doc:`Komut grubu<command-groups>`, içinde paralel veya sırayla "
"çalışan birden çok komut içeren bir komuttur. Komut tabanlı kitaplık, "
"takımların kullanması için birkaç tür komut grubu sağlar ve kullanıcılar, "
"istenirse kendi komutlarını yazmaya teşvik edilir. Komut grupları kendileri "
"``Command`` arayüzünü uyguladıkları için, bunlar `özyinelemeli-recursively "
"composable<https://en.wikipedia.org/wiki/Object_composition#Recursive_composition>`__"
" olarak oluşturulabilir  - biri diğer komut grupları *içinde* içerilebilir. "
"Bu, basit bir kitaplıkla karmaşık robot eylemleri oluşturmanın son derece "
"güçlü bir yolunu sağlar."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:77
msgid "Creating a Robot Project"
msgstr "Bir Robot Projesi Oluşturmak"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:79
msgid ""
"Creating a project is detailed in :ref:`docs/software/vscode-overview"
"/creating-robot-program:Creating a Robot Program`. Select \"Template\" then "
"your programming language then \"New Command Robot\" to create a basic "
"Command-Based Robot program."
msgstr ""
"Bir proje oluşturmanın ayrıntıları : ref: `docs/software/vscode-genel bakış "
"/ create-robot-program : Creating a Robot Program`. Temel bir Komut Tabanlı "
"Robot programı oluşturmak için \"Template\" u ve ardından programlama "
"dilinizi ve ardından \"New Command Robot\"  seçin."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:81
msgid ""
"When you create a New Command Robot project, the new command based vendor "
"library is automatically imported. If you imported a 2019 project or created"
" a different type of project, the old command library is imported, and it is"
" necessary to import the new command based vendor library per "
":doc:`/docs/software/vscode-overview/3rd-party-libraries` and remove the old"
" command library."
msgstr ""
"Yeni bir Komut Robot projesi oluşturduğunuzda, yeni komut tabanlı satıcı "
"kitaplığı otomatik olarak içe aktarılır. Bir 2019 projesini içe "
"aktardıysanız veya farklı türde bir proje oluşturduysanız, eski komut "
"kitaplığı içe aktarılır ve yeni komut tabanlı satıcı kitaplığını şu şekilde "
"içe aktarmak gerekir :doc:`/docs/software/vscode-overview/3rd-party-"
"libraries` ve eski komut kitaplığını kaldırın."
